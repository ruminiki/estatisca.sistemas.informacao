facet_grid(~Var2)
#chart
as.data.frame(proporcao) %>%
ggplot(aes(x=Var1, y=Freq, fill=Var1)) +
geom_bar(stat = "identity") +
scale_fill_brewer(direction = 1, palette = "Pastel2") +
facet_grid(~Var2)
#chart
as.data.frame(proporcao) %>%
ggplot(aes(x=Var1, y=Freq, fill=Var1)) +
geom_bar(stat = "identity") +
scale_fill_brewer(direction = 1, palette = "Set3") +
facet_grid(~Var2)
#chart
as.data.frame(proporcao) %>%
ggplot(aes(x=Var1, y=Freq, fill=Var1)) +
geom_bar(stat = "identity") +
scale_fill_brewer(direction = 1, palette = "Accent") +
facet_grid(~Var2)
#chart
as.data.frame(proporcao) %>%
ggplot(aes(x=Var1, y=Freq, fill=Var1)) +
geom_bar(stat = "identity") +
scale_fill_brewer(direction = 1, palette = "Greys") +
facet_grid(~Var2)
#chart
as.data.frame(proporcao) %>%
ggplot(aes(x=Var1, y=Freq, fill=Var1)) +
geom_bar(stat = "identity") +
scale_fill_brewer(direction = 1, palette = "Purples") +
facet_grid(~Var2)
#chart
as.data.frame(proporcao) %>%
ggplot(aes(x=Var1, y=Freq, fill=Var1)) +
geom_bar(stat = "identity") +
scale_fill_brewer(direction = 1, palette = "YlOrBr") +
facet_grid(~Var2)
#chart
as.data.frame(proporcao) %>%
ggplot(aes(x=Var1, y=Freq, fill=Var1)) +
geom_bar(stat = "identity") +
scale_fill_brewer(direction = 1, palette = "Accent") +
facet_grid(~Var2)
#chart
as.data.frame(proporcao) %>%
ggplot(aes(x=Var1, y=Freq, fill=Var1)) +
geom_bar(stat = "identity") +
scale_fill_brewer(direction = 1, palette = "Set3") +
facet_grid(~Var2)
#chart
as.data.frame(proporcao) %>%
ggplot(aes(x=Var1, y=Freq, fill=Var1)) +
geom_bar(stat = "identity") +
scale_fill_brewer(direction = 1, palette = "Pastel1") +
facet_grid(~Var2)
df <- read.csv("data/titanic.csv")
glimpse(df)
#converte variável categórica inteira, para fator
df$Survived <- ifelse(df$Survived == 1, "Survived", "Died")
df$Pclass   <- as.factor(df$Pclass)
# Realiza o teste qui-quadrado
teste <- chisq.test(df$Survived, df$Pclass)
#converte variável categórica inteira, para fator
df$Survived <- ifelse(df$Survived == 1, "Survived", "Died")
df$Pclass   <- as.factor(df$Pclass)
# Realiza o teste qui-quadrado
teste <- chisq.test(df$Survived, df$Pclass)
# Exibe o resultado do teste
print(teste)
print(ifelse(teste$p.value <= 0.05, "Bingo! Existe associação entre as variáveis!", "Oops! Não existe associação entre as variáveis!"))
# Analisa as proporções das variáveis
proporcao <- prop.table(table(df$Survived, df$Pclass), margin = 2)
print(proporcao)
df <- read.csv("data/titanic.csv")
glimpse(df)
#converte variável categórica inteira, para fator
df$Survived <- ifelse(df$Survived == 1, "Survived", "Died")
df$Pclass   <- as.factor(df$Pclass)
# Realiza o teste qui-quadrado
teste <- chisq.test(df$Survived, df$Pclass)
# Exibe o resultado do teste
print(teste)
print(ifelse(teste$p.value <= 0.05, "Bingo! Existe associação entre as variáveis!", "Oops! Não existe associação entre as variáveis!"))
# Analisa as proporções das variáveis
proporcao <- prop.table(table(df$Survived, df$Pclass), margin = 2)
print(proporcao)
# Realiza o teste qui-quadrado
teste <- chisq.test(df$Survived, df$Sex)
# Exibe o resultado do teste
print(teste)
print(ifelse(teste$p.value <= 0.05, "Bingo! Existe associação entre as variáveis!", "Oops! Não existe associação entre as variáveis!"))
# Analisa as proporções das variáveis
proporcao <- prop.table(table(df$Survived, df$Sex), margin = 2)
print(proporcao)
#chart
as.data.frame(proporcao) %>%
ggplot(aes(x=Var1, y=Freq, fill=Var1)) +
geom_bar(stat = "identity") +
scale_fill_brewer(direction = 1, palette = "Pastel1") +
facet_grid(~Var2)
#chart
as.data.frame(proporcao) %>%
ggplot(aes(x=Var1, y=Freq, fill=Var1)) +
geom_bar(stat = "identity") +
scale_fill_brewer(direction = 1, palette = "Pastel1") +
facet_grid(~Var2)
# Analisa as proporções das variáveis
proporcao <- prop.table(table(df$Survived, df$Pclass), margin = 2)
print(proporcao)
#chart
as.data.frame(proporcao) %>%
ggplot(aes(x=Var1, y=Freq, fill=Var1)) +
geom_bar(stat = "identity") +
scale_fill_brewer(direction = 1, palette = "Pastel1") +
facet_grid(~Var2)
df <- read.csv("data/healthcare_dataset.csv")
glimpse(df)
# Realiza o teste qui-quadrado
teste <- chisq.test(df$Gender, df$Admission.Type)
# Exibe o resultado do teste
print(teste)
print(ifelse(teste$p.value <= 0.05, "Bingo! Existe associação entre as variáveis!", "Oops! Não existe associação entre as variáveis!"))
# Analisa as proporções das variáveis
proporcao <- prop.table(table(df$Gender, df$Admission.Type), margin = 2)
print(proporcao)
as.data.frame(proporcao)
#chart
as.data.frame(proporcao) %>%
ggplot(aes(x=Var1, y=Freq, fill=Var1)) +
geom_bar(stat = "identity") +
scale_fill_brewer(direction = 1, palette = "Pastel1") +
facet_grid(~Var2)
#chart
as.data.frame(proporcao) %>%
ggplot(aes(x=Var1, y=Freq, fill=Var1)) +
geom_bar(stat = "identity") +
xlab("Gênero") + ylab = "Proporção"
#chart
as.data.frame(proporcao) %>%
ggplot(aes(x=Var1, y=Freq, fill=Var1)) +
geom_bar(stat = "identity") +
xlab= "Gênero" + ylab = "Proporção"
#chart
as.data.frame(proporcao) %>%
ggplot(aes(x=Var1, y=Freq, fill=Var1)) +
geom_bar(stat = "identity") +
xLab= "Gênero" + ylab = "Proporção"
#chart
as.data.frame(proporcao) %>%
ggplot(aes(x=Var1, y=Freq, fill=Var1)) +
geom_bar(stat = "identity") +
xlab("Gênero") + ylab("Proporção") +
scale_fill_brewer(direction = 1, palette = "Pastel1") +
facet_grid(~Var2)
# Realiza o teste qui-quadrado
teste <- chisq.test(df$Survived, df$Sex)
# Exibe o resultado do teste
print(teste)
print(ifelse(teste$p.value <= 0.05, "Bingo! Existe associação entre as variáveis!", "Oops! Não existe associação entre as variáveis!"))
# Analisa as proporções das variáveis
proporcao <- prop.table(table(df$Survived, df$Sex), margin = 2)
df <- read.csv("data/titanic.csv")
glimpse(df)
#converte variável categórica inteira, para fator
df$Survived <- ifelse(df$Survived == 1, "Survived", "Died")
df$Pclass   <- as.factor(df$Pclass)
# Realiza o teste qui-quadrado
teste <- chisq.test(df$Survived, df$Pclass)
# Exibe o resultado do teste
print(teste)
print(ifelse(teste$p.value <= 0.05, "Bingo! Existe associação entre as variáveis!", "Oops! Não existe associação entre as variáveis!"))
# Analisa as proporções das variáveis
proporcao <- prop.table(table(df$Survived, df$Pclass), margin = 2)
print(proporcao)
#chart
as.data.frame(proporcao) %>%
ggplot(aes(x=Var1, y=Freq, fill=Var1)) +
geom_bar(stat = "identity") +
scale_fill_brewer(direction = 1, palette = "Pastel1") +
facet_grid(~Var2)
#chart
as.data.frame(proporcao) %>%
ggplot(aes(x=Var1, y=Freq, fill=Var1)) +
geom_bar(stat = "identity") +
xlab("") + ylab("") +
scale_fill_brewer(direction = 1, palette = "Pastel1") +
facet_grid(~Var2)
#chart
as.data.frame(proporcao) %>%
ggplot(aes(x=Var1, y=Freq, fill=Var1)) +
geom_bar(stat = "identity") +
xlab("") + ylab("") +
scale_fill_brewer(direction = 1, palette = "Pastel1") +
facet_grid(~Var2)
df <- read.csv("data/healthcare_dataset.csv")
glimpse(df)
# Realiza o teste qui-quadrado
teste <- chisq.test(df$Gender, df$Admission.Type)
# Exibe o resultado do teste
print(teste)
print(ifelse(teste$p.value <= 0.05, "Bingo! Existe associação entre as variáveis!", "Oops! Não existe associação entre as variáveis!"))
# Analisa as proporções das variáveis
proporcao <- prop.table(table(df$Gender, df$Admission.Type), margin = 2)
print(proporcao)
#chart
as.data.frame(proporcao) %>%
ggplot(aes(x=Var1, y=Freq, fill=Var1)) +
geom_bar(stat = "identity") +
xlab("") + ylab("") +
scale_fill_brewer(direction = 1, palette = "Pastel1") +
facet_grid(~Var2)
# Cria uma variável categórica a partir de intervalos de idade
df$Age.Class <- cut(df$Age,
breaks = c(0, 20, 30, 40, 50, 60, 70, 80, 90),
labels = c("Under 20", "20-29", "30-39", "40-49", "50-59", "60-69", "70-80", "80-90"),
right = FALSE)
# Realiza o teste qui-quadrado
teste <- chisq.test(df$Age.Class, df$Admission.Type)
# Exibe o resultado do teste
print(teste)
print(ifelse(teste$p.value <= 0.05, "Bingo! Existe associação entre as variáveis!", "Oops! Não existe associação entre as variáveis!"))
# Analisa as proporções das variáveis
proporcao <- prop.table(table(df$Age.Class, df$Admission.Type), margin = 2)
print(proporcao)
#chart
as.data.frame(proporcao) %>%
ggplot(aes(x=Var1, y=Freq, fill=Var1)) +
geom_bar(stat = "identity") +
xlab("") + ylab("") +
scale_fill_brewer(direction = 1, palette = "Pastel1") +
facet_grid(~Var2)
#chart
as.data.frame(proporcao) %>%
ggplot(aes(x=Var1, y=Freq, fill=Var1)) +
geom_bar(stat = "identity") +
xlab("") + ylab("") +
scale_fill_brewer(direction = 1, palette = "Pastel1") +
facet_grid(Var2 ~ .)
df <- read.csv("data/dataset.csv")
glimpse(df)
table(df$Family_Income)
df <- read.csv("data/dataset.csv")
glimpse(df)
# Vars
# Sleep_Hours e Exam_Score
# H0: Não há diferença entre as notas de estudantes
# H1: Há diferença entre as notas de estudantes
table(df$Family_Income)
High.Income <- df %>% filter(Family_Income == "High")
Low.Income  <- df %>% filter(Family_Income == "Low")
resultado <- t.test()
resultado <- t.test(High.Income, Low.Income)
View(High.Income)
resultado <- t.test(High.Income$Exam_Score, Low.Income$Exam_Score)
print(resultado)
mean(High.Income$Exam_Score)
School.Type.Private <- df %>% filter(School_Type == "Private")
School.Type.Public  <- df %>% filter(School_Type == "Public")
# Realiza o teste t para comparação entre notas dos dois grupos
resultado <- t.test(School.Type.Private$Exam_Score, School.Type.Public$Exam_Score)
print(resultado)
# Realiza o teste t para comparação entre notas dos dois grupos
resultado <- t.test(School.Type.Private$Hours_Studied, School.Type.Public$Hours_Studied)
print(resultado)
# Realiza o teste t para comparação entre notas dos dois grupos
resultado <- t.test(School.Type.Private$Attendance, School.Type.Public$Attendance)
print(resultado)
# Realiza o teste t para comparação entre notas dos dois grupos
resultado <- t.test(High.Income$Attendance, Low.Income$Attendance)
print(resultado)
Extracurricular.Yes <- df %>% filter(Extracurricular_Activities == "Yes")
Extracurricular.No  <- df %>% filter(Extracurricular_Activities == "No")
# Realiza o teste t para comparação entre notas dos dois grupos
resultado <- t.test(Extracurricular.Yes$Attendance, Extracurricular.Yes$Attendance)
print(resultado)
# Realiza o teste t para comparação entre notas dos dois grupos
resultado <- t.test(Extracurricular.Yes$Exam_Score, Extracurricular.Yes$Exam_Score)
print(resultado)
Extracurricular.Yes <- df %>% filter(Extracurricular_Activities == "Yes")
Extracurricular.No  <- df %>% filter(Extracurricular_Activities == "No")
# Realiza o teste t para comparação entre notas dos dois grupos
resultado <- t.test(Extracurricular.Yes$Exam_Score, Extracurricular.Yes$Exam_Score)
print(resultado)
# Realiza o teste t para comparação entre notas dos dois grupos
resultado <- t.test(Extracurricular.Yes$Exam_Score, Extracurricular.No$Exam_Score)
print(resultado)
Extracurricular.Yes <- df %>% filter(Extracurricular_Activities == "Yes")
Extracurricular.No  <- df %>% filter(Extracurricular_Activities == "No")
# Realiza o teste t para comparação entre notas dos dois grupos
resultado <- t.test(Extracurricular.Yes$Exam_Score, Extracurricular.No$Exam_Score)
print(resultado)
print(resultado)
Gender.Male    <- df %>% filter(Gender == "Male")
Gender.Female  <- df %>% filter(Gender == "Female")
Gender.Male    <- df %>% filter(Gender == "Male")
Gender.Female  <- df %>% filter(Gender == "Female")
# Realiza o teste t para comparação entre notas dos dois grupos
resultado <- t.test(Gender.Male$Exam_Score, Gender.Female$Exam_Score)
print(resultado)
# Realiza o teste t para comparação entre notas dos dois grupos
resultado <- t.test(Gender.Male$Physical_Activity, Gender.Female$Physical_Activity)
print(resultado)
# Realiza o teste t para comparação entre notas dos dois grupos
resultado <- t.test(Gender.Male$Sleep_Hours, Gender.Female$Sleep_Hours)
print(resultado)
# Realiza o teste t para comparação entre notas dos dois grupos
resultado <- t.test(Gender.Male$Hours_Studied, Gender.Female$Hours_Studied)
print(resultado)
High.Performance <- df %>% filter(Exam_Score >= 80)
Low.Performance  <- df %>% filter(Exam_Score < 80)
High.Performance <- df %>% filter(Exam_Score >= 80)
Low.Performance  <- df %>% filter(Exam_Score < 80)
High.Performance <- df %>% filter(Exam_Score >= 75)
Low.Performance  <- df %>% filter(Exam_Score < 74.99)
# Realiza o teste t para comparação entre notas dos dois grupos
resultado <- t.test(High.Performance$Hours_Studied, Low.Performance$Hours_Studied)
High.Performance <- df %>% filter(Exam_Score >= 70)
Low.Performance  <- df %>% filter(Exam_Score < 70)
High.Performance <- df %>% filter(Exam_Score >= 70)
Low.Performance  <- df %>% filter(Exam_Score < 70)
# Realiza o teste t para comparação entre notas dos dois grupos
resultado <- t.test(High.Performance$Hours_Studied, Low.Performance$Hours_Studied)
print(resultado)
df <- read.csv("data/StudentPerformance.csv")
glimpse(df)
# Vars
# Sleep_Hours e Exam_Score
# H0: Não há diferença entre as notas de estudantes
# H1: Há diferença entre as notas de estudantes
table(df$Family_Income)
High.Income <- df %>% filter(Family_Income == "High")
Low.Income  <- df %>% filter(Family_Income == "Low")
# Realiza o teste t para comparação entre notas dos dois grupos
resultado <- t.test(High.Income$Exam_Score, Low.Income$Exam_Score)
print(resultado)
School.Type.Private <- df %>% filter(School_Type == "Private")
School.Type.Public  <- df %>% filter(School_Type == "Public")
# Realiza o teste t para comparação entre notas dos dois grupos
resultado <- t.test(School.Type.Private$Attendance, School.Type.Public$Attendance)
# Cria uma variável categórica a partir de intervalos de idade
df$Age.Class <- cut(df$Age,
breaks = c(0, 20, 30, 40, 50, 60, 70, 80, 90),
labels = c("Under 20", "20-29", "30-39", "40-49", "50-59", "60-69", "70-80", "80-90"),
right = FALSE)
df <- read.csv("data/titanic.csv")
glimpse(df)
df <- read.csv("data/healthcare_dataset.csv")
glimpse(df)
# Realiza o teste qui-quadrado
teste <- chisq.test(df$Gender, df$Admission.Type)
# Exibe o resultado do teste
print(teste)
print(ifelse(teste$p.value <= 0.05, "Bingo! Existe associação entre as variáveis!", "Oops! Não existe associação entre as variáveis!"))
# Analisa as proporções das variáveis
proporcao <- prop.table(table(df$Gender, df$Admission.Type), margin = 2)
print(proporcao)
#chart
as.data.frame(proporcao) %>%
ggplot(aes(x=Var1, y=Freq, fill=Var1)) +
geom_bar(stat = "identity") +
xlab("") + ylab("") +
scale_fill_brewer(direction = 1, palette = "Pastel1") +
facet_grid(~Var2)
#chart
as.data.frame(proporcao) %>%
ggplot(aes(x=Var1, y=Freq, fill=Var1)) +
geom_bar(stat = "identity") +
xlab("") + ylab("") +
scale_fill_brewer(direction = 1, palette = "Set2") +
facet_grid(~Var2)
#chart
as.data.frame(proporcao) %>%
ggplot(aes(x=Var1, y=Freq, fill=Var1)) +
geom_bar(stat = "identity") +
xlab("") + ylab("") +
scale_fill_brewer(direction = 1, palette = "Pastel2") +
facet_grid(~Var2)
#chart
as.data.frame(proporcao) %>%
ggplot(aes(x=Var1, y=Freq, fill=Var1)) +
geom_bar(stat = "identity") +
xlab("") + ylab("") +
scale_color_brewer(direction = 1, palette = "Pastel2") +
facet_grid(~Var2)
scale_fill_brewer
#chart
as.data.frame(proporcao) %>%
ggplot(aes(x=Var1, y=Freq, fill=Var1)) +
geom_bar(stat = "identity") +
xlab("") + ylab("") +
scale_fill_brewer(direction = 1, palette = "Pastel2") +
facet_grid(~Var2)
#chart
as.data.frame(proporcao) %>%
ggplot(aes(x=Var1, y=Freq, fill=Var1)) +
geom_bar(stat = "identity") +
xlab("") + ylab("") +
scale_fill_brewer(direction = 1, palette = "Blues") +
facet_grid(~Var2)
#chart
as.data.frame(proporcao) %>%
ggplot(aes(x=Var1, y=Freq, fill=Var1)) +
geom_bar(stat = "identity") +
xlab("") + ylab("") +
scale_fill_manual(values = brewer.pal(3, "Blues"))
#chart
as.data.frame(proporcao) %>%
ggplot(aes(x=Var1, y=Freq, fill=Var1)) +
geom_bar(stat = "identity") +
xlab("") + ylab("") +
scale_fill_manual(values = brewer.pal(3, "Blues"))  +
facet_grid(~Var2)
#chart
as.data.frame(proporcao) %>%
ggplot(aes(x=Var1, y=Freq, fill=Var1)) +
geom_bar(stat = "identity") +
xlab("") + ylab("") +
scale_fill_brewer(direction = 1, palette = "YlGnBu") +
facet_grid(~Var2)
library(RColorBrewer)
par(mar=c(3,4,2,2))
display.brewer.all()
#chart
as.data.frame(proporcao) %>%
ggplot(aes(x=Var1, y=Freq, fill=Var1)) +
geom_bar(stat = "identity") +
xlab("") + ylab("") +
scale_fill_brewer(direction = 1, palette = "Spectral") +
facet_grid(~Var2)
#chart
as.data.frame(proporcao) %>%
ggplot(aes(x=Var1, y=Freq, fill=Var1)) +
geom_bar(stat = "identity") +
xlab("") + ylab("") +
scale_fill_brewer(direction = 1, palette = "PuBuGn") +
facet_grid(~Var2)
#chart
as.data.frame(proporcao) %>%
ggplot(aes(x=Var1, y=Freq, fill=Var1)) +
geom_bar(stat = "identity") +
xlab("") + ylab("") +
scale_fill_brewer(direction = 1, palette = "Pastel2") +
facet_grid(~Var2)
# Get data:
library(gapminder)
# Charge libraries:
library(ggplot2)
library(gganimate)
# Make a ggplot, but add frame=year: one image per year
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, color = continent)) +
geom_point() +
scale_x_log10() +
theme_bw() +
# gganimate specific bits:
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
transition_time(year) +
ease_aes('linear')
# Save at gif:
anim_save("271-ggplot2-animated-gif-chart-with-gganimate1.gif")
# Cria uma variável categórica a partir de intervalos de idade
df$Age.Class <- cut(df$Age,
breaks = c(0, 20, 30, 40, 50, 60, 70, 80, 90),
labels = c("Under 20", "20-29", "30-39", "40-49", "50-59", "60-69", "70-80", "80-90"),
right = FALSE)
# Realiza o teste qui-quadrado
teste <- chisq.test(df$Age.Class, df$Admission.Type)
# Exibe o resultado do teste
print(teste)
print(ifelse(teste$p.value <= 0.05, "Bingo! Existe associação entre as variáveis!", "Oops! Não existe associação entre as variáveis!"))
# Analisa as proporções das variáveis
proporcao <- prop.table(table(df$Age.Class, df$Admission.Type), margin = 2)
print(proporcao)
#chart
as.data.frame(proporcao) %>%
ggplot(aes(x=Var1, y=Freq, fill=Var1)) +
geom_bar(stat = "identity") +
xlab("") + ylab("") +
scale_fill_brewer(direction = 1, palette = "Pastel1") +
facet_grid(Var2 ~ .)
# Cria uma variável categórica a partir de intervalos de idade
df$Age.Class <- cut(df$Age,
breaks = c(0, 20, 40, 60, 80, 100),
labels = c("Under 20", "20-39", "40-59", "60-79", "80-100"),
right = FALSE)
# Realiza o teste qui-quadrado
teste <- chisq.test(df$Age.Class, df$Admission.Type)
# Exibe o resultado do teste
print(teste)
print(ifelse(teste$p.value <= 0.05, "Bingo! Existe associação entre as variáveis!", "Oops! Não existe associação entre as variáveis!"))
# Analisa as proporções das variáveis
proporcao <- prop.table(table(df$Age.Class, df$Admission.Type), margin = 2)
print(proporcao)
# Cria uma variável categórica a partir de intervalos de idade
df$Age.Class <- cut(df$Age,
breaks = c(0, 20, 40, 60, 80, 100),
labels = c("Under 20", "20-40", "40-60", "60-80", "80-100"),
right = FALSE)
# Realiza o teste qui-quadrado
teste <- chisq.test(df$Age.Class, df$Admission.Type)
# Exibe o resultado do teste
print(teste)
print(ifelse(teste$p.value <= 0.05, "Bingo! Existe associação entre as variáveis!", "Oops! Não existe associação entre as variáveis!"))
# Analisa as proporções das variáveis
proporcao <- prop.table(table(df$Age.Class, df$Admission.Type), margin = 2)
print(proporcao)
#chart
as.data.frame(proporcao) %>%
ggplot(aes(x=Var1, y=Freq, fill=Var1)) +
geom_bar(stat = "identity") +
xlab("") + ylab("") +
scale_fill_brewer(direction = 1, palette = "Pastel1") +
facet_grid(Var2 ~ .)
